<?php
/**
 * Admin Social Statistics Controller
 *
 * PHP version 5
 *
 * Copyright (C) Villanova University 2010.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @category VuFind2
 * @package  Controller
 * @author   Demian Katz <demian.katz@villanova.edu>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     http://vufind.org   Main Site
 */
namespace VuFindAdmin\Controller;
use PHPExcel;
use PHPExcel_IOFactory;

/**
 * Class controls VuFind social statistical data.
 *
 * @category VuFind2
 * @package  Controller
 * @author   Demian Katz <demian.katz@villanova.edu>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     http://vufind.org   Main Site
 */
class PrivateStatsController extends AbstractAdmin
{
    /**
     * Social statistics reporting
     *
     * @return \Zend\View\Model\ViewModel
     */
    public function homeAction()
    {
	//$year = $_GET['year'];
	//$month = $_GET['month'];
	//$yearAjax = $_GET['year'];
	//$monthAjax = $_GET['month'];
	
	$yearFrom = $_GET['yearFrom'];
	$monthFrom = $_GET['monthFrom'];
	$dayFrom = $_GET['dayFrom'];
	$yearTo = $_GET['yearTo'];
	$monthTo = $_GET['monthTo'];
	$dayTo = $_GET['dayTo'];
    	$source = $_GET['source'];
    	
    	$current_year = date('Y');
	$current_month = date('m');
	$current_day = date('d');
    	
    	//$current_year = date("Y");
    	//$current_month = date('m', strtotime('-1 month'))+1;
    	
    	
    	if (empty($yearFrom)) $yearFrom = $current_year;
	if (empty($monthFrom)&& $monthFrom<>"0") $monthFrom = $current_month;
	if (empty($dayFrom)&& $dayFrom<>"0") $dayFrom = $current_day;
	if (empty($yearTo)) $yearTo = $current_year;
	if (empty($monthTo)&& $monthTo<>"0") $monthTo = $current_month;
	if (empty($dayTo)&& $dayTo<>"0") $dayTo = $current_day;
    	
	//if (empty($year)) $year = $current_year;
	//if (empty($month)&& $month<>"0") $month = $current_month;
	//if (empty($source)) $source = "controller";
	//$year="0";
	//$month="0";

    	//Tablas a utilizar
    	$tablaSettings= $this->getTable('Settings');
    	
    	$PrivateStatsT = $tablaSettings->getPrivateStats();
    	
    	
    	$this->getRequest()->getPost()->set('PrivateStats', $PrivateStatsT);
    	if($PrivateStatsT==0){
    		$mens = $this->translate('Statistics not avaliable');
		$this->flashMessenger()->setNamespace('error')
		    		->addMessage($mens);
	}
        //SCB Store statistics
        $data=array('recordId'     => '0','recordSource' => 'No-Stat');
        $this->getServiceLocator()->get('VuFind\PublicstatsStats')
            ->log($data, $this->getRequest());
        //SCB Store statistics

    	$stats = $this->getTable('DownloadStat');
    	$user_stats = $this->getTable('UserStats');
    	$annexAndTrovaUserSession = $this->getTable('AnnexAndTrovaUserSession');
    	$tableLatResources= $this->getTable('LatResources');
    	$results = array();
    	$results [] = $user_stats->getNumberOfHits($yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	$results [] = $user_stats->getNumberOfLogins($yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo) + $annexAndTrovaUserSession->getNumberOfLogins($yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	$results [] = $stats->getAccessFilesWithResType('O', $yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	$results [] = $stats->getAccessFilesWithResType('U', $yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	$results [] = $stats->getAccessFilesWithResType('S', $yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	$results [] = $user_stats->getClicsPerVisit($yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	$results [] = $user_stats->getDurationOfVisit($yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	$latResourcesArray = $tableLatResources->getNumberOfResources($yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	$latResourcesArrayFirst = $tableLatResources->getAllResourcesByDeposit($yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	$userDownload = $stats->getStatsByDate($yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
    	//echo "<pre>";
    	//print_r($userDownload);
    	//echo "</pre>";
    	
    	//print_r($latResourcesArrayFirst);
    	//echo "escribe".count($latResourcesArrayFirst);
    	//print_r($latResourcesArray);
    	$resultsTable = $user_stats->getCountryPercentage($yearFrom, $monthFrom, $dayFrom, $yearTo, $monthTo, $dayTo);
	$output ="";
	foreach ($resultsTable as $position => $item) {
		if($position==0)
			$output = $output .'"'.$item['country'].'": '.$item['percentage'];
		else
			$output = $output .',"'.$item['country'].'": '.$item['percentage'];
	}

	$resultsWithoutMap = $results;
	$resultsWithoutMap[]=$yearFrom;
	$resultsWithoutMap[]=date("F", mktime(0, 0, 0, $monthFrom, 10));
	
    	$results [] = $output;
    	$results [] = $latResourcesArray;
    	
    	// Years to use in the filter
	$yearsUserStats = $user_stats->getYears();
	//print_r($yearsUserStats);
	//echo '</br>';
	$yearsStats = $stats->getYears();
	//print_r($yearsStats);
	//echo '</br>';
	$yearsLatResources = $tableLatResources->getYears();
	//print_r($yearsLatResources);
	//echo '</br>';
	
	$years = array_unique (array_merge (array_filter($yearsUserStats), array_filter($yearsStats)));
	$years = array_unique (array_merge ($years, array_filter($yearsLatResources)));
	arsort($years);
	//print_r($years);
	
	$results [] = $years;
    	
	if (isset($_POST['btnExportarExcel'])){
		$this->exportarexcel($resultsWithoutMap,$yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo,$source);
	}
	if (isset($_POST['btnExportarExcelDepositos'])){
		$this->exportarexcelDepositos($latResourcesArrayFirst,$yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo,$source);
	}

	if (isset($_POST['btnExportarExcelUserDownload'])){
		$this->exportarexcelUserDownload($userDownload,$yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo,$source);
	}

        $view = $this->createViewModel(array('results' => $results, 'resources'=>$latResourcesArrayFirst,userdownload=>$userDownload));
        $view->setTemplate('admin/privatestats/home');
        $view->request = $this->getRequest()->getPost();
    	return $view;





        
        //$view->comments = $this->getTable('comments')->getStatistics();
        //$view->favorites = $this->getTable('userresource')->getStatistics();
        //$view->tags = $this->getTable('resourcetags')->getStatistics();
        return $view;
    }
    public function getResourceNumbers($id) {

    	$tableLatResources= $this->getTable('LatResources');
    	$latResourcesArray = $tableLatResources->getNumberOfResourcesByDeposit($yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo,$id);
    	//echo "escribe".count($latResourcesArray);
    	//print_r($latResourcesArray);
    	return $latResourcesArray;

    }

    public function exportarexcel($results,$yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo,$source){

        if ($source=="ajax"){
	    	$stats = $this->getTable('DownloadStat');
	    	$user_stats = $this->getTable('UserStats');
	    	$annexAndTrovaUserSession = $this->getTable('AnnexAndTrovaUserSession');
	    	$tableLatResources= $this->getTable('LatResources');
	    	$resultsA = array();
	    	$resultsA [] = $user_stats->getNumberOfHits($yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo);
	    	$resultsA [] = $user_stats->getNumberOfLogins($yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo) + $annexAndTrovaUserSession->getNumberOfLogins($yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo);
	    	$resultsA [] = $stats->getAccessFilesWithResType('O', $yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo);
	    	$resultsA [] = $stats->getAccessFilesWithResType('U', $yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo);
	    	$resultsA [] = $stats->getAccessFilesWithResType('S', $yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo);
	    	$resultsA [] = $user_stats->getClicsPerVisit($yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo);
	    	$resultsA [] = $user_stats->getDurationOfVisit($yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo);
		$results = $resultsA;
	}

	$contador = 1;
	$dir = dirname(dirname(__FILE__));


	//require_once($dir.'/Controller/PHPExcel/IOFactory.php');
	require_once('/usr/local/vufind/module/VuFind/src/VuFind/Controller/PHPExcel/IOFactory.php');

	// Crea un nuevo objeto PHPExcel
	$objPHPExcel = new PHPExcel;

	//Propiedades
	$objPHPExcel->getProperties()
		->setCreator("SOAS")
		->setLastModifiedBy("SOAS")
		->setTitle($this->translate('Private statistics'))
		->setSubject($this->translate('Private statistics'))
		->setDescription($this->translate('Private statistics'))
		->setKeywords($this->translate('Private statistics'))
		->setCategory($this->translate('Private statistics'));
		
	$objSheet  = $objPHPExcel->getActiveSheet();

	
	//  XLS file
	//$objSheet->getStyle('A'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');
	//$objSheet->getStyle('B'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');
	//$objSheet->getStyle('C'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');
	//$objSheet->getStyle('D'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');
	//$objSheet->getStyle('E'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');

	$objSheet ->getCell('A'.$contador)->setValue($this->translate('stats_year'). ',' .$this->translate('stats_month'). ',"' .$this->translate('page hits'). '","' .$this->translate('user logins'). '","' .$this->translate('clics_per_visit').'","' .$this->translate('duration_of_visit').'","' .$this->translate('files with O access').'","' .$this->translate('files with U access').'","' .$this->translate('files with S access').'"');
	
	$contador=$contador+1;

	$objSheet ->getCell('A'.$contador)->setValue($results[8]. ',"' .$results[7]. '","' .$results[0]. '","' .$results[1] . '","'.$results[2] . '","'.$results[3] . '","'.$results[4] . '","'.$results[5]. '","'.gmdate("H:i:s", $results[6]) .'"' );
	
	

	//FIN EXCEL
	
	// Renombrar Hoja
	$objPHPExcel->getActiveSheet()->setTitle('Private statistics');
	 
	// Establecer la hoja activa, para que cuando se abra el documento se muestre primero.
	$objPHPExcel->setActiveSheetIndex(0);
	
	// XLS file
	/*header('Content-Type: application/vnd.ms-excel'); 
	header('Content-Disposition: attachment;filename="' . $filename.date('d/m/Y') . '.xls"');
	header('Cache-Control: max-age=0');
	ob_end_clean();
	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');  	//force user to download the Excel file without writing it to server's HD
	$objWriter->save('php://output');*/
	
	// CSV file
	header('Content-Type: application/csv'); 
	header('Content-Disposition: attachment;filename="' . $filename.date('d/m/Y') . '.csv"');
	header('Cache-Control: max-age=0');
	ob_end_clean();
	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'CSV');  	//force user to download the Excel file without writing it to server's HD
	$objWriter->save('php://output');
	exit();
	
	}


    public function exportarexcelDepositos($results,$yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo,$source){
    	

        if ($source=="ajax"){
        	$tableLatResources= $this->getTable('LatResources');
        	$results = $tableLatResources->getAllResourcesByDeposit($yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo);
        }
        	
        
	$contador = 1;
	$dir = dirname(dirname(__FILE__));


	//require_once($dir.'/Controller/PHPExcel/IOFactory.php');
	require_once('/usr/local/vufind/module/VuFind/src/VuFind/Controller/PHPExcel/IOFactory.php');

	// Crea un nuevo objeto PHPExcel
	$objPHPExcel = new PHPExcel;

	//Propiedades
	$objPHPExcel->getProperties()
		->setCreator("SOAS")
		->setLastModifiedBy("SOAS")
		->setTitle($this->translate('Private statistics'))
		->setSubject($this->translate('Private statistics'))
		->setDescription($this->translate('Private statistics'))
		->setKeywords($this->translate('Private statistics'))
		->setCategory($this->translate('Private statistics'));
		
	$objSheet  = $objPHPExcel->getActiveSheet();

		$objSheet ->getCell('A'.$contador)->setValue($this->translate('Id'). ',' .$this->translate('Deposit name'). ',"' .$this->translate('Deposit Id'). '","' .$this->translate('Project Id'). '","' .$this->translate('Resources O').'","' .$this->translate('Resources U').'","' .$this->translate('Resources S').'","' .$this->translate('Total resources').'","' .$this->translate('Status').'"');

	$contador=$contador+1;

	          $urlSolr = 'http://'.$_SERVER['SERVER_NAME'].':8080/solr/biblio/select?q=format%3A%22Deposit%22&fl=id%2C+title%2C+corpusid%2C+deposit_status_string+project_id_number&wt=xml&indent=true&rows=1000';
	          $proxy = ''.$proxy_host.':'.$proxy_port.'';
	
	          $ch = curl_init();
	          curl_setopt($ch, CURLOPT_URL,$urlSolr);
	          //curl_setopt($ch, CURLOPT_PROXY, $proxy);
	          curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	          curl_setopt($ch, CURLOPT_TIMEOUT, 5);
	          curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
	          $contentDepositTitle = curl_exec($ch);
	          curl_close($ch);
	          $xml = simplexml_load_string($contentDepositTitle, 'SimpleXMLElement', LIBXML_NOCDATA);
	
	$solrList = array();

	$listCount=0;
     	foreach( $xml->result->doc  as $result ) {
     		//echo "<tr>";
		$listOutput=array();
	$listTitle="In progress";
	$listCorpus="In progress";
	foreach( $result->str as $str ) {
		if($str['name'] == 'id') {
			$listId= $str."";
			//echo "<td>".$listId."</td>";
			$listOutput['id'] = $listId;
		}
		if($str['name'] == 'title'){
                	$listTitle = $str."";
                	//echo "<td>".$listTitle."</td>";
			$listOutput['title'] = $listTitle;
                }
		if($str['name'] == 'corpusid'){
                	$listCorpus = $str."";
                	//echo "<td>".$listCorpus."</td>";
			$listOutput['corpusid'] = $listCorpus;
			
                }
        }
        $projectId="Other funding body";
	foreach( $result->arr as $arr ){
		if($arr['name'] == 'project_id_number') {
			$pId = array();
			foreach($arr->str as $result2 ) {
                                $pId[] = ''.$result2;
                        }
			$projectId = implode(", ", $pId);
			$listOutput['projectId'] = $projectId;

                }
     		//echo "</tr>"; 
        }
        $listStatus="In progress";	
	foreach( $result->arr as $arr ){
		if($arr['name'] == 'deposit_status_string') {
			$listStatus = $arr->str."";
			$listOutput['status'] = $listStatus;

                }
     		//echo "</tr>"; 
        }
	//$solrList[] = array('id'=>$listId, 'title'=>$listTitle, 'depositId'=>$listCorpus, 'status'=>$listStatus);
	$solrList[$listId] = array( 'title'=>$listTitle, 'depositId'=>$listCorpus, 'status'=>$listStatus, 'projectId'=>$projectId);
        $output[$listCount]=$listOutput;
        $listCount++;
     }


     foreach( $results as  $item=>$index ){

     	$title=$this->translate('In progress');
     	$depositId=$this->translate('In progress');
     	$projectId=$this->translate('Other funding body');
     	$status=$this->translate('In progress');

     	foreach ($solrList[$item] as $indexElem=>$elem){
     		if ($indexElem=='title') $title = $elem;
     		if ($indexElem=='depositId') $depositId = $elem;
     		if ($indexElem=='projectId') $projectId = $elem;
     		if ($indexElem=='status') $status = $elem;
     	}

     	$countO=0;
     	$countS=0;
     	$countU=0;
     	
     	foreach ($index as $subIndex=>$k){
     		foreach ($k as $j=>$l) {
     		if ($subIndex=='O') $countO = $l;
     		if ($subIndex=='U') $countU = $l;
     		if ($subIndex=='S') $countS = $l;
	        }
     	}
	//echo $item.'<br\>';

	$objSheet ->getCell('A'.$contador)->setValue($item. ',"' .$title. '","' .$depositId. '","' .$projectId . '","'.$countO . '","'.$countU . '","'.$countS . '","'.(intval($countO)+intval($countS)+intval($countU)). '","'.$status .'"' );
	$contador=$contador +1;

     }


	//$objSheet ->getCell('A'.$contador)->setValue($results[8]. ',"' .$results[7]. '","' .$results[0]. '","' .$results[1] . '","'.$results[2] . '","'.$results[3] . '","'.$results[4] . '","'.$results[5]. '","'.gmdate("H:i:s", $results[6]) .'"' );
	



	

	//FIN EXCEL
	
	// Renombrar Hoja
	$objPHPExcel->getActiveSheet()->setTitle('Private statistics');
	 
	// Establecer la hoja activa, para que cuando se abra el documento se muestre primero.
	$objPHPExcel->setActiveSheetIndex(0);
	
	// XLS file
	/*header('Content-Type: application/vnd.ms-excel'); 
	header('Content-Disposition: attachment;filename="' . $filename.date('d/m/Y') . '.xls"');
	header('Cache-Control: max-age=0');
	ob_end_clean();
	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');  	//force user to download the Excel file without writing it to server's HD
	$objWriter->save('php://output');*/
	
	// CSV file
	header('Content-Type: application/csv'); 
	//Pongo el nombre del fichero que me interese
	//header('Content-Disposition: attachment;filename="' . $filename.date('d/m/Y') .'-resuls'.count($results).'month-'.$month.'year-'.$year. '.csv"');
	header('Content-Disposition: attachment;filename="' . $filename.date('d/m/Y') . '.csv"');
	
	header('Cache-Control: max-age=0');
	ob_end_clean();
	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'CSV');  	//force user to download the Excel file without writing it to server's HD
	$objWriter->save('php://output');
	exit();
	

	}


    public function exportarexcelUserDownload($results,$yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo,$source){

        if ($source=="ajax"){
    	    $stats = $this->getTable('DownloadStat');
	    $results = $stats->getStatsByDate($yearFrom,$monthFrom,$dayFrom,$yearTo,$monthTo,$dayTo);
        }

	$contador = 1;
	$dir = dirname(dirname(__FILE__));


	//require_once($dir.'/Controller/PHPExcel/IOFactory.php');
	require_once('/usr/local/vufind/module/VuFind/src/VuFind/Controller/PHPExcel/IOFactory.php');

	// Crea un nuevo objeto PHPExcel
	$objPHPExcel = new PHPExcel;

	//Propiedades
	$objPHPExcel->getProperties()
		->setCreator("SOAS")
		->setLastModifiedBy("SOAS")
		->setTitle($this->translate('Private statistics'))
		->setSubject($this->translate('Private statistics'))
		->setDescription($this->translate('Private statistics'))
		->setKeywords($this->translate('Private statistics'))
		->setCategory($this->translate('Private statistics'));
		
	$objSheet  = $objPHPExcel->getActiveSheet();

	
	//  XLS file
	//$objSheet->getStyle('A'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');
	//$objSheet->getStyle('B'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');
	//$objSheet->getStyle('C'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');
	//$objSheet->getStyle('D'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');
	//$objSheet->getStyle('E'.$contador)->getFont()->setBold(true)->setName('Helvetica')->setSize(10)->getColor()->setRGB('da2c45');

	$objSheet ->getCell('A'.$contador)->setValue($this->translate('User'). ',' .$this->translate('Time'). ',"' .$this->translate('Resource path').'"');

     foreach( $results as  $item=>$index ){

     	$name=$index['name'];
     	$datetime=$index['datetime'];
     	$path=$index['path'];
	$contador=$contador+1;

	$objSheet ->getCell('A'.$contador)->setValue($name. ',"' .$datetime. '","' .$path. '"' );
	

     	}

	

	

	//FIN EXCEL
	
	// Renombrar Hoja
	$objPHPExcel->getActiveSheet()->setTitle('Private statistics');
	 
	// Establecer la hoja activa, para que cuando se abra el documento se muestre primero.
	$objPHPExcel->setActiveSheetIndex(0);
	
	// XLS file
	/*header('Content-Type: application/vnd.ms-excel'); 
	header('Content-Disposition: attachment;filename="' . $filename.date('d/m/Y') . '.xls"');
	header('Cache-Control: max-age=0');
	ob_end_clean();
	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');  	//force user to download the Excel file without writing it to server's HD
	$objWriter->save('php://output');*/
	
	// CSV file
	header('Content-Type: application/csv'); 
	header('Content-Disposition: attachment;filename="' . $filename.date('d/m/Y') . '.csv"');
	header('Cache-Control: max-age=0');
	ob_end_clean();
	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'CSV');  	//force user to download the Excel file without writing it to server's HD
	$objWriter->save('php://output');
	exit();
	
	}


}

